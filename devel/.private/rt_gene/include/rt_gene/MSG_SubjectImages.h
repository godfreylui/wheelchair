// Generated by gencpp from file rt_gene/MSG_SubjectImages.msg
// DO NOT EDIT!


#ifndef RT_GENE_MESSAGE_MSG_SUBJECTIMAGES_H
#define RT_GENE_MESSAGE_MSG_SUBJECTIMAGES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/Image.h>

namespace rt_gene
{
template <class ContainerAllocator>
struct MSG_SubjectImages_
{
  typedef MSG_SubjectImages_<ContainerAllocator> Type;

  MSG_SubjectImages_()
    : subject_id()
    , face_img()
    , right_eye_img()
    , left_eye_img()  {
    }
  MSG_SubjectImages_(const ContainerAllocator& _alloc)
    : subject_id(_alloc)
    , face_img(_alloc)
    , right_eye_img(_alloc)
    , left_eye_img(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _subject_id_type;
  _subject_id_type subject_id;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _face_img_type;
  _face_img_type face_img;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _right_eye_img_type;
  _right_eye_img_type right_eye_img;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _left_eye_img_type;
  _left_eye_img_type left_eye_img;





  typedef boost::shared_ptr< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> const> ConstPtr;

}; // struct MSG_SubjectImages_

typedef ::rt_gene::MSG_SubjectImages_<std::allocator<void> > MSG_SubjectImages;

typedef boost::shared_ptr< ::rt_gene::MSG_SubjectImages > MSG_SubjectImagesPtr;
typedef boost::shared_ptr< ::rt_gene::MSG_SubjectImages const> MSG_SubjectImagesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_gene::MSG_SubjectImages_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rt_gene

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'rt_gene': ['/home/godfrey/wheelchair/src/rt_gene/rt_gene/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3ba5bab4b08adf79e584570df0f104c";
  }

  static const char* value(const ::rt_gene::MSG_SubjectImages_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3ba5bab4b08adf7ULL;
  static const uint64_t static_value2 = 0x9e584570df0f104cULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_gene/MSG_SubjectImages";
  }

  static const char* value(const ::rt_gene::MSG_SubjectImages_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string subject_id\n"
"sensor_msgs/Image face_img\n"
"sensor_msgs/Image right_eye_img\n"
"sensor_msgs/Image left_eye_img\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rt_gene::MSG_SubjectImages_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.subject_id);
      stream.next(m.face_img);
      stream.next(m.right_eye_img);
      stream.next(m.left_eye_img);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MSG_SubjectImages_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_gene::MSG_SubjectImages_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_gene::MSG_SubjectImages_<ContainerAllocator>& v)
  {
    s << indent << "subject_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.subject_id);
    s << indent << "face_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.face_img);
    s << indent << "right_eye_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_img);
    s << indent << "left_eye_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_img);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_GENE_MESSAGE_MSG_SUBJECTIMAGES_H
